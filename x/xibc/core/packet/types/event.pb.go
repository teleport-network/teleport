// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xibc/core/packet/v1/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventSendPacket is emitted on send packet
type EventSendPacket struct {
	SrcChain string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	DstChain string `protobuf:"bytes,2,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
	Sequence string `protobuf:"bytes,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Packet   []byte `protobuf:"bytes,4,opt,name=packet,proto3" json:"packet,omitempty"`
}

func (m *EventSendPacket) Reset()         { *m = EventSendPacket{} }
func (m *EventSendPacket) String() string { return proto.CompactTextString(m) }
func (*EventSendPacket) ProtoMessage()    {}
func (*EventSendPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28bb2b978caec0f, []int{0}
}
func (m *EventSendPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSendPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSendPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSendPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendPacket.Merge(m, src)
}
func (m *EventSendPacket) XXX_Size() int {
	return m.Size()
}
func (m *EventSendPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendPacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendPacket proto.InternalMessageInfo

func (m *EventSendPacket) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *EventSendPacket) GetDstChain() string {
	if m != nil {
		return m.DstChain
	}
	return ""
}

func (m *EventSendPacket) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *EventSendPacket) GetPacket() []byte {
	if m != nil {
		return m.Packet
	}
	return nil
}

// EventRecvPacket is emitted on receive packet
type EventRecvPacket struct {
	SrcChain string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	DstChain string `protobuf:"bytes,2,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
	Sequence string `protobuf:"bytes,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Packet   []byte `protobuf:"bytes,4,opt,name=packet,proto3" json:"packet,omitempty"`
}

func (m *EventRecvPacket) Reset()         { *m = EventRecvPacket{} }
func (m *EventRecvPacket) String() string { return proto.CompactTextString(m) }
func (*EventRecvPacket) ProtoMessage()    {}
func (*EventRecvPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28bb2b978caec0f, []int{1}
}
func (m *EventRecvPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecvPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecvPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecvPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecvPacket.Merge(m, src)
}
func (m *EventRecvPacket) XXX_Size() int {
	return m.Size()
}
func (m *EventRecvPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecvPacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecvPacket proto.InternalMessageInfo

func (m *EventRecvPacket) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *EventRecvPacket) GetDstChain() string {
	if m != nil {
		return m.DstChain
	}
	return ""
}

func (m *EventRecvPacket) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *EventRecvPacket) GetPacket() []byte {
	if m != nil {
		return m.Packet
	}
	return nil
}

// EventWriteAck is emitted on receive packet
type EventWriteAck struct {
	SrcChain string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	DstChain string `protobuf:"bytes,2,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
	Sequence string `protobuf:"bytes,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Packet   []byte `protobuf:"bytes,4,opt,name=packet,proto3" json:"packet,omitempty"`
	Ack      []byte `protobuf:"bytes,5,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (m *EventWriteAck) Reset()         { *m = EventWriteAck{} }
func (m *EventWriteAck) String() string { return proto.CompactTextString(m) }
func (*EventWriteAck) ProtoMessage()    {}
func (*EventWriteAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28bb2b978caec0f, []int{2}
}
func (m *EventWriteAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWriteAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWriteAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWriteAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWriteAck.Merge(m, src)
}
func (m *EventWriteAck) XXX_Size() int {
	return m.Size()
}
func (m *EventWriteAck) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWriteAck.DiscardUnknown(m)
}

var xxx_messageInfo_EventWriteAck proto.InternalMessageInfo

func (m *EventWriteAck) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *EventWriteAck) GetDstChain() string {
	if m != nil {
		return m.DstChain
	}
	return ""
}

func (m *EventWriteAck) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *EventWriteAck) GetPacket() []byte {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *EventWriteAck) GetAck() []byte {
	if m != nil {
		return m.Ack
	}
	return nil
}

// EventAcknowledgePacket is emitted on acknowledgement packet
type EventAcknowledgePacket struct {
	SrcChain string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	DstChain string `protobuf:"bytes,2,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
	Sequence string `protobuf:"bytes,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Packet   []byte `protobuf:"bytes,4,opt,name=packet,proto3" json:"packet,omitempty"`
	Ack      []byte `protobuf:"bytes,5,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (m *EventAcknowledgePacket) Reset()         { *m = EventAcknowledgePacket{} }
func (m *EventAcknowledgePacket) String() string { return proto.CompactTextString(m) }
func (*EventAcknowledgePacket) ProtoMessage()    {}
func (*EventAcknowledgePacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28bb2b978caec0f, []int{3}
}
func (m *EventAcknowledgePacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAcknowledgePacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAcknowledgePacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAcknowledgePacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAcknowledgePacket.Merge(m, src)
}
func (m *EventAcknowledgePacket) XXX_Size() int {
	return m.Size()
}
func (m *EventAcknowledgePacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAcknowledgePacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventAcknowledgePacket proto.InternalMessageInfo

func (m *EventAcknowledgePacket) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *EventAcknowledgePacket) GetDstChain() string {
	if m != nil {
		return m.DstChain
	}
	return ""
}

func (m *EventAcknowledgePacket) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *EventAcknowledgePacket) GetPacket() []byte {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *EventAcknowledgePacket) GetAck() []byte {
	if m != nil {
		return m.Ack
	}
	return nil
}

func init() {
	proto.RegisterType((*EventSendPacket)(nil), "xibc.core.packet.v1.EventSendPacket")
	proto.RegisterType((*EventRecvPacket)(nil), "xibc.core.packet.v1.EventRecvPacket")
	proto.RegisterType((*EventWriteAck)(nil), "xibc.core.packet.v1.EventWriteAck")
	proto.RegisterType((*EventAcknowledgePacket)(nil), "xibc.core.packet.v1.EventAcknowledgePacket")
}

func init() { proto.RegisterFile("xibc/core/packet/v1/event.proto", fileDescriptor_e28bb2b978caec0f) }

var fileDescriptor_e28bb2b978caec0f = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xb1, 0x4e, 0xf3, 0x30,
	0x10, 0xc7, 0xeb, 0xaf, 0x1f, 0x55, 0x6b, 0x81, 0x40, 0x01, 0x55, 0x51, 0x91, 0x4c, 0xd5, 0xa9,
	0x0b, 0xb1, 0x2a, 0x66, 0x86, 0x82, 0xd8, 0x51, 0x19, 0x2a, 0xb1, 0xa0, 0xe6, 0x72, 0x4a, 0xa3,
	0x14, 0x3b, 0xd8, 0x6e, 0x5a, 0x26, 0x1e, 0x01, 0x46, 0x1e, 0x89, 0xb1, 0x23, 0x23, 0x4a, 0x5e,
	0x04, 0xd9, 0x89, 0xba, 0x74, 0xa7, 0xdb, 0xdd, 0xfd, 0x7f, 0x27, 0xff, 0x64, 0x1d, 0xbd, 0x58,
	0x27, 0x21, 0x70, 0x90, 0x0a, 0x79, 0x36, 0x83, 0x14, 0x0d, 0xcf, 0x47, 0x1c, 0x73, 0x14, 0x26,
	0xc8, 0x94, 0x34, 0xd2, 0x3b, 0xb5, 0x40, 0x60, 0x81, 0xa0, 0x02, 0x82, 0x7c, 0xd4, 0x3b, 0x8b,
	0x65, 0x2c, 0x5d, 0xce, 0x6d, 0x55, 0xa1, 0x83, 0x37, 0x7a, 0x7c, 0x67, 0x37, 0x1f, 0x50, 0x44,
	0xf7, 0x8e, 0xf5, 0xce, 0x69, 0x47, 0x2b, 0x78, 0x82, 0xf9, 0x2c, 0x11, 0x3e, 0xe9, 0x93, 0x61,
	0x67, 0xd2, 0xd6, 0x0a, 0x6e, 0x6d, 0x6f, 0xc3, 0x48, 0x9b, 0x3a, 0xfc, 0x57, 0x85, 0x91, 0x36,
	0x55, 0xd8, 0xa3, 0x6d, 0x8d, 0x2f, 0x4b, 0x14, 0x80, 0x7e, 0xb3, 0x5e, 0xac, 0x7b, 0xaf, 0x4b,
	0x5b, 0x95, 0x8b, 0xff, 0xbf, 0x4f, 0x86, 0x87, 0x93, 0xba, 0xdb, 0x0a, 0x4c, 0x10, 0xf2, 0xbd,
	0x08, 0xbc, 0x13, 0x7a, 0xe4, 0x0c, 0xa6, 0x2a, 0x31, 0x38, 0x86, 0xf4, 0x6f, 0xdf, 0xf7, 0x4e,
	0x68, 0x73, 0x06, 0xa9, 0x7f, 0xe0, 0x86, 0xb6, 0x1c, 0x7c, 0x12, 0xda, 0x75, 0x46, 0x63, 0x48,
	0x85, 0x5c, 0x2d, 0x30, 0x8a, 0x71, 0x1f, 0x5f, 0xb3, 0xab, 0x76, 0x33, 0xfd, 0x2a, 0x18, 0xd9,
	0x14, 0x8c, 0xfc, 0x14, 0x8c, 0x7c, 0x94, 0xac, 0xb1, 0x29, 0x59, 0xe3, 0xbb, 0x64, 0x8d, 0xc7,
	0xeb, 0x38, 0x31, 0xf3, 0x65, 0x18, 0x80, 0x7c, 0xe6, 0x06, 0x17, 0x98, 0x49, 0x65, 0x2e, 0x05,
	0x9a, 0x95, 0x54, 0xe9, 0x76, 0xc0, 0xd7, 0x7c, 0xe7, 0x76, 0xcd, 0x6b, 0x86, 0x3a, 0x6c, 0xb9,
	0x73, 0xbc, 0xfa, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xfb, 0x7d, 0x57, 0xdc, 0x02, 0x00, 0x00,
}

func (m *EventSendPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSendPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSendPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Packet) > 0 {
		i -= len(m.Packet)
		copy(dAtA[i:], m.Packet)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Packet)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sequence) > 0 {
		i -= len(m.Sequence)
		copy(dAtA[i:], m.Sequence)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sequence)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DstChain) > 0 {
		i -= len(m.DstChain)
		copy(dAtA[i:], m.DstChain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcChain) > 0 {
		i -= len(m.SrcChain)
		copy(dAtA[i:], m.SrcChain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecvPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecvPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecvPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Packet) > 0 {
		i -= len(m.Packet)
		copy(dAtA[i:], m.Packet)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Packet)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sequence) > 0 {
		i -= len(m.Sequence)
		copy(dAtA[i:], m.Sequence)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sequence)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DstChain) > 0 {
		i -= len(m.DstChain)
		copy(dAtA[i:], m.DstChain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcChain) > 0 {
		i -= len(m.SrcChain)
		copy(dAtA[i:], m.SrcChain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWriteAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWriteAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWriteAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ack) > 0 {
		i -= len(m.Ack)
		copy(dAtA[i:], m.Ack)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Ack)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Packet) > 0 {
		i -= len(m.Packet)
		copy(dAtA[i:], m.Packet)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Packet)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sequence) > 0 {
		i -= len(m.Sequence)
		copy(dAtA[i:], m.Sequence)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sequence)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DstChain) > 0 {
		i -= len(m.DstChain)
		copy(dAtA[i:], m.DstChain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcChain) > 0 {
		i -= len(m.SrcChain)
		copy(dAtA[i:], m.SrcChain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAcknowledgePacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAcknowledgePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAcknowledgePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ack) > 0 {
		i -= len(m.Ack)
		copy(dAtA[i:], m.Ack)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Ack)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Packet) > 0 {
		i -= len(m.Packet)
		copy(dAtA[i:], m.Packet)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Packet)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sequence) > 0 {
		i -= len(m.Sequence)
		copy(dAtA[i:], m.Sequence)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sequence)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DstChain) > 0 {
		i -= len(m.DstChain)
		copy(dAtA[i:], m.DstChain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcChain) > 0 {
		i -= len(m.SrcChain)
		copy(dAtA[i:], m.SrcChain)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSendPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstChain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Sequence)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Packet)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventRecvPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstChain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Sequence)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Packet)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventWriteAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstChain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Sequence)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Packet)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Ack)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventAcknowledgePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstChain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Sequence)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Packet)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Ack)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSendPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSendPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSendPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sequence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packet = append(m.Packet[:0], dAtA[iNdEx:postIndex]...)
			if m.Packet == nil {
				m.Packet = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecvPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecvPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecvPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sequence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packet = append(m.Packet[:0], dAtA[iNdEx:postIndex]...)
			if m.Packet == nil {
				m.Packet = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWriteAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWriteAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWriteAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sequence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packet = append(m.Packet[:0], dAtA[iNdEx:postIndex]...)
			if m.Packet == nil {
				m.Packet = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ack = append(m.Ack[:0], dAtA[iNdEx:postIndex]...)
			if m.Ack == nil {
				m.Ack = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAcknowledgePacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAcknowledgePacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAcknowledgePacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sequence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packet = append(m.Packet[:0], dAtA[iNdEx:postIndex]...)
			if m.Packet == nil {
				m.Packet = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ack = append(m.Ack[:0], dAtA[iNdEx:postIndex]...)
			if m.Ack == nil {
				m.Ack = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
