// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xibc/apps/rcc/v1/rcc.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RCCPacketData defines a struct for the packet payload
type RCCPacketData struct {
	SrcChain        string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	DestChain       string `protobuf:"bytes,2,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
	Sequence        uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Sender          string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	ContractAddress string `protobuf:"bytes,5,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Data            []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RCCPacketData) Reset()         { *m = RCCPacketData{} }
func (m *RCCPacketData) String() string { return proto.CompactTextString(m) }
func (*RCCPacketData) ProtoMessage()    {}
func (*RCCPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1acb2a557f07292f, []int{0}
}
func (m *RCCPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RCCPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RCCPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RCCPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RCCPacketData.Merge(m, src)
}
func (m *RCCPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RCCPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RCCPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RCCPacketData proto.InternalMessageInfo

func (m *RCCPacketData) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *RCCPacketData) GetDestChain() string {
	if m != nil {
		return m.DestChain
	}
	return ""
}

func (m *RCCPacketData) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *RCCPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *RCCPacketData) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *RCCPacketData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RCCPacketData)(nil), "xibc.apps.rcc.v1.RCCPacketData")
}

func init() { proto.RegisterFile("xibc/apps/rcc/v1/rcc.proto", fileDescriptor_1acb2a557f07292f) }

var fileDescriptor_1acb2a557f07292f = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0x6b, 0x28, 0x55, 0x6b, 0x81, 0xa8, 0x2c, 0x84, 0xa2, 0x22, 0xac, 0x88, 0x29, 0x0c,
	0xc4, 0xaa, 0xd8, 0xd8, 0x20, 0x7c, 0x00, 0x8a, 0x98, 0x58, 0x2a, 0xc7, 0x79, 0x4a, 0xa3, 0x42,
	0x1c, 0xec, 0xd7, 0x52, 0xfe, 0x82, 0x2f, 0x62, 0x66, 0xec, 0xc8, 0x88, 0x92, 0x1f, 0x41, 0x76,
	0x4a, 0x25, 0x26, 0xbf, 0x7b, 0xce, 0xf5, 0x72, 0xe9, 0x64, 0x5d, 0x66, 0x4a, 0xc8, 0xba, 0xb6,
	0xc2, 0x28, 0x25, 0x56, 0x53, 0xf7, 0xc4, 0xb5, 0xd1, 0xa8, 0xd9, 0xd8, 0xb9, 0xd8, 0xb9, 0xd8,
	0xc1, 0xd5, 0x74, 0x72, 0x52, 0xe8, 0x42, 0x7b, 0x29, 0xdc, 0xd5, 0xf5, 0x2e, 0x3e, 0x09, 0x3d,
	0x4a, 0x93, 0xe4, 0x41, 0xaa, 0x05, 0xe0, 0xbd, 0x44, 0xc9, 0xce, 0xe8, 0xc8, 0x1a, 0x35, 0x53,
	0x73, 0x59, 0x56, 0x01, 0x09, 0x49, 0x34, 0x4a, 0x87, 0xd6, 0xa8, 0xc4, 0x65, 0x76, 0x4e, 0x69,
	0x0e, 0x16, 0xb7, 0x76, 0xcf, 0xdb, 0x91, 0x23, 0x9d, 0x9e, 0xd0, 0xa1, 0x85, 0xd7, 0x25, 0x54,
	0x0a, 0x82, 0xfd, 0x90, 0x44, 0xfd, 0x74, 0x97, 0xd9, 0x29, 0x1d, 0x58, 0xa8, 0x72, 0x30, 0x41,
	0xdf, 0x7f, 0xdb, 0x26, 0x76, 0x49, 0xc7, 0x4a, 0x57, 0x68, 0xa4, 0xc2, 0x99, 0xcc, 0x73, 0x03,
	0xd6, 0x06, 0x07, 0xbe, 0x71, 0xfc, 0xc7, 0x6f, 0x3b, 0xcc, 0x18, 0xed, 0xe7, 0x12, 0x65, 0x30,
	0x08, 0x49, 0x74, 0x98, 0xfa, 0xfb, 0xee, 0xf1, 0xab, 0xe1, 0x64, 0xd3, 0x70, 0xf2, 0xd3, 0x70,
	0xf2, 0xd1, 0xf2, 0xde, 0xa6, 0xe5, 0xbd, 0xef, 0x96, 0xf7, 0x9e, 0x6e, 0x8a, 0x12, 0xe7, 0xcb,
	0x2c, 0x56, 0xfa, 0x45, 0x20, 0x3c, 0x43, 0xad, 0x0d, 0x5e, 0x55, 0x80, 0x6f, 0xda, 0x2c, 0x76,
	0x40, 0xac, 0xc5, 0xff, 0x15, 0xf1, 0xbd, 0x06, 0x9b, 0x0d, 0xfc, 0x3a, 0xd7, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x48, 0xef, 0xac, 0xd2, 0x63, 0x01, 0x00, 0x00,
}

func (m *RCCPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RCCPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RCCPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRcc(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintRcc(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintRcc(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if m.Sequence != 0 {
		i = encodeVarintRcc(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DestChain) > 0 {
		i -= len(m.DestChain)
		copy(dAtA[i:], m.DestChain)
		i = encodeVarintRcc(dAtA, i, uint64(len(m.DestChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcChain) > 0 {
		i -= len(m.SrcChain)
		copy(dAtA[i:], m.SrcChain)
		i = encodeVarintRcc(dAtA, i, uint64(len(m.SrcChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRcc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRcc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RCCPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChain)
	if l > 0 {
		n += 1 + l + sovRcc(uint64(l))
	}
	l = len(m.DestChain)
	if l > 0 {
		n += 1 + l + sovRcc(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovRcc(uint64(m.Sequence))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovRcc(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovRcc(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRcc(uint64(l))
	}
	return n
}

func sovRcc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRcc(x uint64) (n int) {
	return sovRcc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RCCPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RCCPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RCCPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRcc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRcc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRcc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRcc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRcc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRcc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRcc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRcc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRcc = fmt.Errorf("proto: unexpected end of group")
)
