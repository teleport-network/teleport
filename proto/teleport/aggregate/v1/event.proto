syntax = "proto3";
package teleport.aggregate.v1;
import "gogoproto/gogo.proto";
option go_package = "github.com/teleport-network/teleport/x/aggregate/types";

// Status enumerates the status of IBC Aggregate
enum Status {
  option (gogoproto.goproto_enum_prefix) = false;
  // STATUS_UNKNOWN defines the invalid/undefined status
  STATUS_UNKNOWN = 0;
  // STATUS_SUCCESS defines the success IBC Aggregate execute
  STATUS_SUCCESS = 1;
  // STATUS_FAILED defines the failed IBC Aggregate execute
  STATUS_FAILED = 2;
}

// EventIBCAggregate is emitted on IBC Aggregate
message EventIBCAggregate {
  Status status = 1;
  string message = 2;
  uint64 sequence = 3;
  string source_channel = 4;
  string destination_channel = 5;
}

// EventRegisterTokens is emitted on aggregate register coins
message EventRegisterTokens {
  repeated string denom = 1;
  string erc20_token = 2;
}

// EventEnableTimeBasedSupplyLimit is emitted on aggregate enable time based
// supply limit
message EventEnableTimeBasedSupplyLimit {
  string erc20_address = 1 [ (gogoproto.customname) = "ERC20Address" ];
  // time peroid in seconds
  string timePeriod = 2;
  // time based limit
  string timeBasedLimit = 3;
  // max amount single transfer
  string maxAmount = 4;
  // min amount single transfer
  string minAmount = 5;
}

// EventDisableTimeBasedSupplyLimit is emitted on aggregate disable time based
// supply limit
message EventDisableTimeBasedSupplyLimit {
  string erc20_address = 1 [ (gogoproto.customname) = "ERC20Address" ];
}