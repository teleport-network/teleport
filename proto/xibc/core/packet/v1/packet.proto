syntax = "proto3";
package xibc.core.packet.v1;

option go_package = "github.com/bitdao-io/bitchain/x/xibc/core/packet/types";

import "gogoproto/gogo.proto";

// Packet defines a type that carries data across different chains through XIBC
message Packet {
  option (gogoproto.goproto_getters) = false;

  // identifies the chain id of the sending chain.
  string src_chain = 1 [ (gogoproto.moretags) = "yaml:\"src_chain\"" ];
  // identifies the chain id of the receiving chain.
  string dst_chain = 2 [ (gogoproto.moretags) = "yaml:\"dst_chain\"" ];

  // number corresponds to the order of sends and receives, where a Packet
  // with an earlier sequence number must be sent and received before a Packet
  // with a later sequence number.
  uint64 sequence = 3;
  string sender = 4;
  // transfer data. keep empty if not used.
  bytes transfer_data = 5;
  // call data. keep empty if not used
  bytes call_data = 6;
  string callback_address = 7;
  uint64 fee_option = 8;
}

// TransferData defines packet transfer_data struct
message TransferData {
  // identifies the token receiver on est chain
  string receiver = 1;
  bytes amount = 2;
  // identifies the token address on src chain
  string token = 3;
  // identifies the ori token address on dst chain if exist
  string oriToken = 4;
}

message CallData {
  // identifies the contract address on dst chain
  string contractAddress = 1;
  // identifies the data which used to call the contract
  bytes callData = 2;
}

// PacketState defines the generic type necessary to retrieve and store
// packet commitments, acknowledgements, and receipts.
// Caller is responsible for knowing the context necessary to interpret this
// state as a commitment, acknowledgement, or a receipt.
message PacketState {
  option (gogoproto.goproto_getters) = false;

  // the sending chain identifier.
  string src_chain = 1 [ (gogoproto.moretags) = "yaml:\"src_chain\"" ];
  // the receiving chain identifier.
  string dst_chain = 2 [ (gogoproto.moretags) = "yaml:\"dst_chain\"" ];
  // packet sequence.
  uint64 sequence = 3;
  // embedded data that represents packet state.
  bytes data = 4;
}

// Acknowledgement is the recommended acknowledgement format to be used by
// app-specific protocols.
message Acknowledgement {
  // error code
  // 0: success;
  // 1: system failed;
  // 2: transfer failed;
  // 3: call failed;
  // 4: undefined
  uint64 code = 1;
  bytes result = 2;
  string message = 3;
  string relayer = 4;
  uint64 fee_option = 5;
}
