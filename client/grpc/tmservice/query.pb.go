// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/base/tendermint/v1beta1/query.proto

package tmservice

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/tendermint/tendermint/abci/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetBlockResultsRequest struct {
	// height is the height of the block to query.
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetBlockResultsRequest) Reset()         { *m = GetBlockResultsRequest{} }
func (m *GetBlockResultsRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockResultsRequest) ProtoMessage()    {}
func (*GetBlockResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f6e4bfd05982703, []int{0}
}
func (m *GetBlockResultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockResultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockResultsRequest.Merge(m, src)
}
func (m *GetBlockResultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockResultsRequest proto.InternalMessageInfo

func (m *GetBlockResultsRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetBlockResultsResponse struct {
	Height                int64                      `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	TxsResults            []*types.ResponseDeliverTx `protobuf:"bytes,2,rep,name=txs_results,json=txsResults,proto3" json:"txs_results,omitempty"`
	BeginBlockEvents      []*types.Event             `protobuf:"bytes,3,rep,name=begin_block_events,json=beginBlockEvents,proto3" json:"begin_block_events,omitempty"`
	EndBlockEvents        []*types.Event             `protobuf:"bytes,4,rep,name=end_block_events,json=endBlockEvents,proto3" json:"end_block_events,omitempty"`
	ValidatorUpdates      []*types.ValidatorUpdate   `protobuf:"bytes,5,rep,name=validator_updates,json=validatorUpdates,proto3" json:"validator_updates,omitempty"`
	ConsensusParamUpdates *types.ConsensusParams     `protobuf:"bytes,6,opt,name=consensus_param_updates,json=consensusParamUpdates,proto3" json:"consensus_param_updates,omitempty"`
}

func (m *GetBlockResultsResponse) Reset()         { *m = GetBlockResultsResponse{} }
func (m *GetBlockResultsResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockResultsResponse) ProtoMessage()    {}
func (*GetBlockResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f6e4bfd05982703, []int{1}
}
func (m *GetBlockResultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockResultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockResultsResponse.Merge(m, src)
}
func (m *GetBlockResultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockResultsResponse proto.InternalMessageInfo

func (m *GetBlockResultsResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetBlockResultsResponse) GetTxsResults() []*types.ResponseDeliverTx {
	if m != nil {
		return m.TxsResults
	}
	return nil
}

func (m *GetBlockResultsResponse) GetBeginBlockEvents() []*types.Event {
	if m != nil {
		return m.BeginBlockEvents
	}
	return nil
}

func (m *GetBlockResultsResponse) GetEndBlockEvents() []*types.Event {
	if m != nil {
		return m.EndBlockEvents
	}
	return nil
}

func (m *GetBlockResultsResponse) GetValidatorUpdates() []*types.ValidatorUpdate {
	if m != nil {
		return m.ValidatorUpdates
	}
	return nil
}

func (m *GetBlockResultsResponse) GetConsensusParamUpdates() *types.ConsensusParams {
	if m != nil {
		return m.ConsensusParamUpdates
	}
	return nil
}

func init() {
	proto.RegisterType((*GetBlockResultsRequest)(nil), "teleport.base.tendermint.v1beta1.GetBlockResultsRequest")
	proto.RegisterType((*GetBlockResultsResponse)(nil), "teleport.base.tendermint.v1beta1.GetBlockResultsResponse")
}

func init() {
	proto.RegisterFile("teleport/base/tendermint/v1beta1/query.proto", fileDescriptor_9f6e4bfd05982703)
}

var fileDescriptor_9f6e4bfd05982703 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0x06, 0x82, 0xb4, 0x95, 0x20, 0xac, 0x20, 0x0d, 0x01, 0x59, 0x51, 0x4e, 0x3d,
	0x80, 0x97, 0x96, 0x03, 0x94, 0x0b, 0xa8, 0x2d, 0xe2, 0x84, 0x84, 0x4c, 0x41, 0x88, 0x8b, 0xb5,
	0xb6, 0x07, 0x67, 0x55, 0x67, 0xd7, 0xdd, 0x1d, 0x9b, 0x54, 0x88, 0x0b, 0x4f, 0x80, 0xc4, 0x43,
	0xf0, 0x28, 0x70, 0xac, 0xd4, 0x0b, 0x47, 0x94, 0xf0, 0x20, 0xc8, 0x6b, 0xa7, 0x4d, 0x48, 0xa1,
	0x52, 0x6f, 0xde, 0x99, 0xff, 0xff, 0x66, 0xd6, 0x33, 0x4b, 0xee, 0x22, 0xa4, 0x90, 0x29, 0x8d,
	0x2c, 0xe4, 0x06, 0x18, 0x82, 0x8c, 0x41, 0x8f, 0x84, 0x44, 0x56, 0x6c, 0x84, 0x80, 0x7c, 0x83,
	0x1d, 0xe4, 0xa0, 0x0f, 0xbd, 0x4c, 0x2b, 0x54, 0xb4, 0x3f, 0x53, 0x7b, 0xa5, 0xda, 0x3b, 0x55,
	0x7b, 0xb5, 0xba, 0x77, 0x23, 0x51, 0x89, 0xb2, 0x62, 0x56, 0x7e, 0x55, 0xbe, 0xde, 0xad, 0x44,
	0xa9, 0x24, 0x05, 0x66, 0x4f, 0x61, 0xfe, 0x9e, 0x71, 0x59, 0x23, 0x7b, 0x77, 0xea, 0x14, 0xcf,
	0x04, 0xe3, 0x52, 0x2a, 0xe4, 0x28, 0x94, 0x34, 0x75, 0xf6, 0xf6, 0x5c, 0x43, 0x3c, 0x8c, 0x04,
	0xc3, 0xc3, 0x0c, 0xea, 0xe4, 0xe0, 0x3e, 0xe9, 0x3c, 0x07, 0xdc, 0x4e, 0x55, 0xb4, 0xef, 0x83,
	0xc9, 0x53, 0x34, 0x3e, 0x1c, 0xe4, 0x60, 0x90, 0x76, 0x48, 0x6b, 0x08, 0x22, 0x19, 0x62, 0xd7,
	0xe9, 0x3b, 0xeb, 0x4d, 0xbf, 0x3e, 0x0d, 0xbe, 0x35, 0xc9, 0xda, 0x92, 0xc5, 0x64, 0x4a, 0x1a,
	0xf8, 0x97, 0x87, 0xee, 0x90, 0x55, 0x1c, 0x9b, 0x40, 0x57, 0xf2, 0xee, 0x4a, 0xbf, 0xb9, 0xbe,
	0xba, 0x39, 0x98, 0xbf, 0x7b, 0xd9, 0x98, 0x37, 0xe3, 0xec, 0x42, 0x2a, 0x0a, 0xd0, 0x7b, 0x63,
	0x9f, 0xe0, 0xd8, 0xd4, 0x45, 0xe8, 0x2e, 0xa1, 0x21, 0x24, 0x42, 0x06, 0x61, 0x59, 0x3a, 0x80,
	0x02, 0x24, 0x9a, 0x6e, 0xd3, 0xb2, 0x3a, 0x4b, 0xac, 0x67, 0x65, 0xda, 0x6f, 0x5b, 0x87, 0xed,
	0xd5, 0x06, 0x0c, 0x7d, 0x4a, 0xda, 0x20, 0xe3, 0x45, 0xc6, 0xa5, 0xff, 0x32, 0xae, 0x82, 0x8c,
	0xe7, 0x09, 0x2f, 0xc8, 0xf5, 0x82, 0xa7, 0x22, 0xe6, 0xa8, 0x74, 0x90, 0x67, 0x31, 0x47, 0x30,
	0xdd, 0xcb, 0x16, 0xd1, 0x5f, 0x42, 0xbc, 0x99, 0x29, 0x5f, 0x5b, 0xa1, 0xdf, 0x2e, 0x16, 0x03,
	0x86, 0xbe, 0x25, 0x6b, 0x51, 0x79, 0x69, 0x69, 0x72, 0x13, 0x64, 0x5c, 0xf3, 0xd1, 0x09, 0xb4,
	0xd5, 0x77, 0xce, 0x84, 0xee, 0xcc, 0xf4, 0x2f, 0x4b, 0xb9, 0xf1, 0x6f, 0x46, 0x0b, 0x81, 0x9a,
	0xbc, 0x79, 0xec, 0x90, 0x2b, 0xaf, 0x40, 0x17, 0x22, 0x02, 0xfa, 0xdd, 0x21, 0xd7, 0xfe, 0x9a,
	0x1a, 0x7d, 0xe4, 0x9d, 0xb7, 0x8a, 0xde, 0xd9, 0xbb, 0xd1, 0xdb, 0xba, 0x80, 0xb3, 0x1a, 0xed,
	0xe0, 0xc9, 0xe7, 0xe3, 0xdf, 0x5f, 0x57, 0xb6, 0xe8, 0x43, 0x76, 0xee, 0xab, 0xb1, 0x33, 0xaa,
	0x77, 0x86, 0x7d, 0xac, 0x56, 0xe9, 0xd3, 0xf6, 0xde, 0x8f, 0x89, 0xeb, 0x1c, 0x4d, 0x5c, 0xe7,
	0xd7, 0xc4, 0x75, 0xbe, 0x4c, 0xdd, 0xc6, 0xd1, 0xd4, 0x6d, 0xfc, 0x9c, 0xba, 0x8d, 0x77, 0x8f,
	0x13, 0x81, 0xc3, 0x3c, 0xf4, 0x22, 0x35, 0x3a, 0x81, 0xdf, 0x93, 0x80, 0x1f, 0x94, 0xde, 0x3f,
	0xad, 0x16, 0xa5, 0x02, 0x24, 0xb2, 0x44, 0x67, 0x11, 0xc3, 0x91, 0xa9, 0xfe, 0x4f, 0xd8, 0xb2,
	0xcf, 0xe1, 0xc1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x31, 0xd6, 0x84, 0xcc, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// GetBlockResults
	GetBlockResults(ctx context.Context, in *GetBlockResultsRequest, opts ...grpc.CallOption) (*GetBlockResultsResponse, error)
}

type serviceClient struct {
	cc grpc1.ClientConn
}

func NewServiceClient(cc grpc1.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetBlockResults(ctx context.Context, in *GetBlockResultsRequest, opts ...grpc.CallOption) (*GetBlockResultsResponse, error) {
	out := new(GetBlockResultsResponse)
	err := c.cc.Invoke(ctx, "/teleport.base.tendermint.v1beta1.Service/GetBlockResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// GetBlockResults
	GetBlockResults(context.Context, *GetBlockResultsRequest) (*GetBlockResultsResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) GetBlockResults(ctx context.Context, req *GetBlockResultsRequest) (*GetBlockResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockResults not implemented")
}

func RegisterServiceServer(s grpc1.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_GetBlockResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetBlockResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.base.tendermint.v1beta1.Service/GetBlockResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetBlockResults(ctx, req.(*GetBlockResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.base.tendermint.v1beta1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockResults",
			Handler:    _Service_GetBlockResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/base/tendermint/v1beta1/query.proto",
}

func (m *GetBlockResultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockResultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockResultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockResultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockResultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockResultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsensusParamUpdates != nil {
		{
			size, err := m.ConsensusParamUpdates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ValidatorUpdates) > 0 {
		for iNdEx := len(m.ValidatorUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.EndBlockEvents) > 0 {
		for iNdEx := len(m.EndBlockEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EndBlockEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BeginBlockEvents) > 0 {
		for iNdEx := len(m.BeginBlockEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BeginBlockEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TxsResults) > 0 {
		for iNdEx := len(m.TxsResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxsResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetBlockResultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *GetBlockResultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if len(m.TxsResults) > 0 {
		for _, e := range m.TxsResults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.BeginBlockEvents) > 0 {
		for _, e := range m.BeginBlockEvents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.EndBlockEvents) > 0 {
		for _, e := range m.EndBlockEvents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ValidatorUpdates) > 0 {
		for _, e := range m.ValidatorUpdates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.ConsensusParamUpdates != nil {
		l = m.ConsensusParamUpdates.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetBlockResultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockResultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxsResults = append(m.TxsResults, &types.ResponseDeliverTx{})
			if err := m.TxsResults[len(m.TxsResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginBlockEvents = append(m.BeginBlockEvents, &types.Event{})
			if err := m.BeginBlockEvents[len(m.BeginBlockEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndBlockEvents = append(m.EndBlockEvents, &types.Event{})
			if err := m.EndBlockEvents[len(m.EndBlockEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorUpdates = append(m.ValidatorUpdates, &types.ValidatorUpdate{})
			if err := m.ValidatorUpdates[len(m.ValidatorUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusParamUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusParamUpdates == nil {
				m.ConsensusParamUpdates = &types.ConsensusParams{}
			}
			if err := m.ConsensusParamUpdates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
